<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Ordinary Boy, A Marvelous Toy</title><link href="http://blog.cosmoslx.me/" rel="alternate"></link><link href="http://blog.cosmoslx.me/feeds/atom.xml" rel="self"></link><id>http://blog.cosmoslx.me/</id><updated>2015-01-03T21:08:58+08:00</updated><entry><title>把你的blog从octopress迁移到pelican吧(1)</title><link href="http://blog.cosmoslx.me/pelican-blog.html" rel="alternate"></link><updated>2015-01-03T21:08:58+08:00</updated><author><name>cosmoslx</name></author><id>tag:blog.cosmoslx.me,2015-01-03:pelican-blog.html</id><summary type="html">&lt;p&gt; 在很久很久之前有一个用 &lt;a href="http://octopress.org"&gt;octopress&lt;/a&gt; 在 github pages 上搭建的 blog, octopress 提供使用 markdown 的方式来写 blog， 非常的方便 ， 而且默认提供的功能和模板也足够的强大 。
 然而唯一的缺陷是是使用 Ruby 及 Rake 来配置和部署 ， 简单看了一下 ， 感觉比较不易读 ,  要自定义以及扩展起来比较麻烦 ， 而且产生 blog 的目录结构也复杂不够直观 。
 如果有一个同样支持 markdown 同时可以提供相同功能 ， 而更易用的 Python 版本 octopress 那多好啊 。
 于是一小心发现到基于 Python 的 &lt;a href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt; 这个项目就马上感觉就是这个了 ， 于是就有了本次的迁移 。&lt;/p&gt;


&lt;h1&gt;pelican 的特性 &lt;/h1&gt;
&lt;p&gt; 说说我认为 pelican 的优点 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 由 Python 实现 ， 配置文件简单清晰 ， 主题基于 Jinja， 扩展方便 &lt;/li&gt;
&lt;li&gt; 官方提供 &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;pelican-plugins&lt;/a&gt; 及 &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;， 提供大量已有的插件和主题 ,&amp;nbsp; 懒人必备 &lt;/li&gt;
&lt;li&gt; 目录结构清晰 ， 没有复杂的层次结构 &lt;/li&gt;
&lt;li&gt; 默认使用 make 来自动化提交 ， 更通用 ， 相比 rake,&amp;nbsp; 更易于自定义和改进 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 然而相比于 octopress 的缺点也不是没有 ， 首先是默认主题就没有 octopress 功能完整和好用 ， 同时默认安装如果要布置到 github pages 上还需要自己手动配置 。 接下来我会说说 &lt;a href="http://docs.getpelican.com/en/3.5.0/settings.html"&gt; 官方文档 &lt;/a&gt; 中没有提到的上述的配置 。 &lt;/p&gt;
&lt;h1&gt;pelican 的安装 &lt;/h1&gt;
&lt;p&gt; 在官方文档的 &lt;a href="http://docs.getpelican.com/en/3.5.0/quickstart.html"&gt; 安装指南 &lt;/a&gt; 有的东西 ， 我这里就不再重重复 。&lt;/p&gt;
&lt;p&gt; 总的来说安装其实很简单 ， 直接使用 &lt;code&gt;pip install pelican&lt;/code&gt; 即可 。&lt;/p&gt;
&lt;p&gt; 然后使用 &lt;code&gt;pelican-quickstart&lt;/code&gt; 命令在当前目录下建立一个初始的目录结构 ， 如下 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── content
├── develop_server.sh
├── fabfile.py
├── Makefile
├── output
├── pelicanconf.py
└── publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 其中 &lt;code&gt;pelicanconf.py&lt;/code&gt; 是本地测试使用的配置 ,  而 &lt;code&gt;publishconf.py&lt;/code&gt; 则是使用 &lt;code&gt;make publish&lt;/code&gt; 对外发布时使用的配置 。
&lt;code&gt;content&lt;/code&gt; 用于存放 markdown 和相关静态文件的源目录 ， 所生成的静态网站将会输出到 &lt;code&gt;output&lt;/code&gt; 目录中 。&lt;/p&gt;
&lt;h1&gt;pelican 的配置运行 &lt;/h1&gt;
&lt;p&gt; 我们可以直接在 &lt;code&gt;content&lt;/code&gt; 目录下 ， 建立一个 &lt;code&gt;test.md&lt;/code&gt; 文件作为实验 ， 输入如下内容 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lift&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 现在就可以使用命令 &lt;code&gt;make devserver&lt;/code&gt; 来启动一个本地默认可以访问的 http://localhost:8000 测试 http 服务器 ,  并通过默认测试配置 &lt;code&gt;pelicanconf.py&lt;/code&gt; 来生成的 blog 的静态网页 。&lt;/p&gt;
&lt;p&gt;Ok， 到此为此 ，pelican 就正式配置运行起来啦 ， 下次将会说一下具体 &lt;code&gt;pelicanconf.py&lt;/code&gt; 和 &lt;code&gt;publishconf.py&lt;/code&gt; 的配置 ， 特有功能 ， 插件以及主题的使用 。&lt;/p&gt;</summary></entry><entry><title>小v的sleep掉电bug根本原因分析和解决</title><link href="http://blog.cosmoslx.me/veer-sleep-bug.html" rel="alternate"></link><updated>2012-02-04T15:23:00+08:00</updated><author><name>cosmoslx</name></author><id>tag:blog.cosmoslx.me,2012-02-04:veer-sleep-bug.html</id><summary type="html">&lt;p&gt;hi~ 各位机油 , 龙年快乐啊 , 从 2011 年的圣诞的那天开始我拥抱 veer, 走上 webos 之路 , 各位煮机网的机油都给我提供了大量的帮助 , 现在是我小小贡献的时候了 . 废话不多说 , 进入正题 .&lt;/p&gt;


&lt;h1&gt;sleep 掉电 bug&lt;/h1&gt;
&lt;p&gt; 简单回顾一下所谓的 sleep 掉电 bug 及如何判断是否你的小 v 有掉电 bug 呢 .&lt;/p&gt;
&lt;h2&gt; 什么是 sleep 掉电 bug&lt;/h2&gt;
&lt;p&gt; 回顾一下所谓的 &lt;a href="http://bbs.zoopda.com/forum.php?mod=viewthread&amp;amp;tid=85588&amp;amp;fromuid=230125"&gt;sleep 掉电 bug&lt;/a&gt; 指的是 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;webos 设备有过待机突然掉电的情况 ， 通过刷机和 reboot 解决 ， 就是可能有 sleep bug， 即设备不能正常 sleep
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 通常如果你的 veer 充满电并在晚上睡觉时开启飞行模式一般早上起来会消损 2%~3% 的电 ,&amp;nbsp; 而如果有你的 veer 消损 20%~30% 的电量 , 那么很可能就是掉电 bug.&lt;/p&gt;
&lt;h2&gt; 判断标准及方法 &lt;/h2&gt;
&lt;p&gt; 使用 sdlterminal, 详细 &lt;a href="http://bbs.zoopda.com/forum.php?mod=viewthread&amp;amp;tid=85588&amp;amp;fromuid=230125"&gt; 参考 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1. 在 preware 中安装 sdlterminal 这个软件 ；
2. 在非充电的状态下运行 sdlterminal， 单击电源键 ，15 秒后再单击电源键 ；
3. 查看 sdlterminal 上的 powerd 信息 ， 正常情况 sdlterminal 会记录两个时间信息 ， 一个是你第一次按电源键的时间 ， 另一个是第二次按电源键的时间 ；
4. 如果出现很多 system go to sleep now  和  system woke up， 就说明你的设备存在 sleep&amp;nbsp;bug。&lt;/p&gt;
&lt;h1&gt; 引起 sleep 掉电 bug 的原因分析 &lt;/h1&gt;
&lt;p&gt; 有很多相关的帖子分析了掉电 bug 的原因 , 有的人认为是硬件的问题 , 有的人认为是 rom 的问题 , 在这里我就不多描述了 .&amp;nbsp; 这里开始描述一下我发现的 sleep 掉电的原因的经过 .&lt;/p&gt;
&lt;p&gt; 可能大家开始入手 veer 的时候而且如果是动感地带的卡的话都会遇到过这样的问题 :
&lt;a href="http://bbs.zoopda.com/forum.php?mod=viewthread&amp;amp;tid=94264&amp;amp;fromuid=230125"&gt; 为甚么我的 &lt;span class="caps"&gt;VEER&lt;/span&gt; 装上动感地带的卡后老是出现 “&lt;span class="caps"&gt;SIM&lt;/span&gt; 卡服务 ” 的字样 &lt;/a&gt;
 我和我 &lt;span class="caps"&gt;GF&lt;/span&gt; 一起买的 veer, 她的就不会 , 而我的就经常弹出 , 于是按照上面 &lt;a href="http://bbs.zoopda.com/forum.php?mod=viewthread&amp;amp;tid=94264&amp;amp;fromuid=230125"&gt;2&lt;/a&gt; 的做法删除了 stk, 动感终于不会弾了 ,
 但是随之而来的却是 veer 的电量快速消损 , 看来我是遇到了传说中的 sleep 掉电 bug 了 .
 于是开始参考煮机网上的机油的各种建议 , 开始优化 , 可是效果却还是不太好 .
&lt;em&gt; 开始技术分析 , 不想看的机油直接看结论吧 , 哈哈 &lt;/em&gt;&lt;/p&gt;
&lt;h2&gt; 技术分析 &lt;/h2&gt;
&lt;p&gt; 在参考各种掉电 bug 处理的帖子中 , 其中的一个帖子一位机油提到过 ,  使用一个工具跟踪 sdlterminal 发出的 wake up 事件 , 给我了灵感 .
 果断的想去搞清楚 wake up 事件的来源 .
 因为正是由于有不断的 wake up 事件使得 veer 在待机的时候相关电源管理的进程 powerd 无法调度 veer 的内核进入 sleep 状态 .&amp;nbsp; 如果知道了这个事件的源头并成功阻止它 , 那么我们的 sleep 掉电的问题就会解决了 .&lt;/p&gt;
&lt;p&gt; 来一个小插曲 : 在这个时候我打补丁一不小心搞挂了机 , 于是重新刷机 . 动感地带还是不断在弹出 . 非常烦人 .
 于是我想把这个问题也解决一下而不用去删除 stk, 就把我 gf 的 sim 卡放到我的 veer 中测试了一下 , 好像机器又没有弾了 .
 就开始怀疑我的 sim 卡可能用太久了有点接触不良于是就只好把 stk 删除来干掉烦人的动感地带 , 哈哈 , 世界又清静了 .&amp;nbsp; 过了两天 , 我 gf 的机子也说不断弾动感地带了 , 这怎么回事呢 . 果断帮她处理掉 .&lt;/p&gt;
&lt;p&gt; 而上面的小插曲又给我灵感了 , 动感地带弾出不是一种事件吗 ? 它之所以会弹出是因为手机不断在进入网络 , 所以才会有弹出提示啊 .
 正常的情况下一次开机第一次弹出就不会再强了 . 于是为了验证这个想法 , 果断找来了我的旧 wm6 手机 , 插卡开机 , 不断弹出 !&amp;nbsp;ok, 好了我终于明白了动感地带弹出信息不是由于 stk 程序的问题 , 而是由于不断的进入网络 , 换言之 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 我的 sim 卡坏了 ! 导致不断弹出动感地带信息 !
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 最后 , 联想我的 gf 原来好好的不弹出信息却由于我测试后就弹出了 , 联想我做过的操作 , 很容易就推导出这样的结论 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 由于我热插拔 ( 没有关机就换 )sim 卡 , 导致了 sim 卡坏了 !
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt; 结论 &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt; 动感地带信息的不断弹出 , 导致 veer 不能正常 sleep 从而导致了 sleep&amp;nbsp;bug.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sim 卡损坏了 , 导致动感地带信息的不断弹出 .&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 在 veer 中热挺拔 sim 卡 , 极容易导致 sim 卡损坏 .&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h1&gt;sleep 掉电 bug 的解决方法及验证 &lt;/h1&gt;
&lt;p&gt; 好了 , 有了上述的 sleep 掉电 bug 的分析 , 那么解决方法和验证方法都非常明确和简单了 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 到移动营业厅办理换 SIM 卡 ( 我这里要 15 元和服务密码 ), 这样就不会有 sleep bug 了 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 经过我和我 gf 的这一个多月来的验证 , 证实了我已经解决了 sleep bug, 现在飞行模式待机一晚就 2% 的电量啦 .&amp;nbsp; 越来越喜欢我的小 v 了 . 希望对大家有帮助 . 谢谢 !&lt;/p&gt;
&lt;p&gt; 如果有时间 , 在开学前我会整理一下我的 veer&amp;amp;webos 的 wiki 笔记分享给煮机网的各位好机油 ~ 谢谢你们 .&lt;/p&gt;
&lt;h1&gt; 参考 &lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://bbs.zoopda.com/forum.php?mod=viewthread&amp;amp;tid=85588&amp;amp;fromuid=230125"&gt; 待机突然掉电的真正原因 ，11 月 21 日针对 veer 更新 ！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bbs.zoopda.com/forum.php?mod=viewthread&amp;amp;tid=94264&amp;amp;fromuid=230125"&gt; 为甚么我的 &lt;span class="caps"&gt;VEER&lt;/span&gt; 装上动感地带的卡后老是出现 “&lt;span class="caps"&gt;SIM&lt;/span&gt; 卡服务 ” 的字样 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>2012: a turn</title><link href="http://blog.cosmoslx.me/2012-a-turn.html" rel="alternate"></link><updated>2012-01-21T23:27:00+08:00</updated><author><name>cosmoslx</name></author><id>tag:blog.cosmoslx.me,2012-01-21:2012-a-turn.html</id><summary type="html">&lt;h2&gt; 缘起 &lt;/h2&gt;
&lt;p&gt; 很久了我一直都觉得缺少自己的一个 blog， 可以长期坚持记录一下自己的成长点滴供自己回顾及朋友们分享 。
 其实在很久以前我确实有过一个小 blog， 大概在 &lt;a href="http://www.blogcn.com"&gt;blogcn&lt;/a&gt; 建立的 ( 太久了以至我现在已经找不回来了 )， 有很大部分的当时收集的转载的内容和一小部分的学习经验 。&amp;nbsp; 然而由于各种的原因而遭到我的荒废慢慢的变得完全没有使用了 ， 从此以后就过着没有 blogging 的幸福生活 。&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt; 自我检查一下很容易就能发现我不想 blogging 的原因 ：&lt;ol&gt;
&lt;li&gt; 喜新厌旧 ， 喜欢不断尝试新鲜的事物 ， 不喜欢对已经认为了解的事物再花时间 。&lt;/li&gt;
&lt;li&gt; 懒 ， 语文写作能力不太好 ， 码字觉得比较痛苦 。&lt;/li&gt;
&lt;li&gt; 更喜欢使用笔和纸上 ， 手写笔记及抄书的感觉更能促进我的思维 。&lt;/li&gt;
&lt;li&gt; 没有找到可以满足我大部分需求的 blog 平台 , 如有版本控制 ， 易备份导出等 。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 从上大学算起的这几年来 , 学习到的知识经验点滴也只能存放于我的笔记本中 , 记录于我的脑海中 , 分享于我的口中 。&amp;nbsp; 知识和经验就零散的分布在各个地方在用到的时候难以再次检索 ， 这种情况一直到现在 。 可能由于我慢慢变老 ， 记忆也不想以前那么的活跃 ， 这样的一个不整洁的知识系统越来越成为我发展的阻碍 , 终于到达无忍受的地步 , 于是我决定需要改变 。&lt;/p&gt;
&lt;p&gt; 余下的自由的时间我已经感觉不多了 ， 我决心在 2012 做出一些必要的改变 ， 去尝试更多 。 于是就有了我这个全新的属于自己的 blog， 借此记录以后的经验教训的同时也可以回顾整理以前的离散的笔记知识 ， 而同时作为我的系统的完善我知识框架的其中一步 。 当然还有一个小心愿是好好练习一下我的写作能力无论是中文还是 english, 我希望我会坚持并能做到 。&lt;/p&gt;
&lt;p&gt; 在此一定要感谢 &lt;a href="https://plus.google.com/112707284697092221808/posts"&gt;maple&lt;/a&gt;， 没有他介绍的本 blog 用的框架 &lt;a href="http://octopress.com"&gt;octopress&lt;/a&gt;， 可能我还没有那么快能实行我的决定 ， 因为 &lt;a href="http://octopress.com"&gt;octopress&lt;/a&gt; 基本较好的解决了我上面的第四点问题 ， 我以后会好好整理一下我对 blog 的需求及为什么我选择 &lt;a href="http://octopress.com"&gt;octopress&lt;/a&gt; 和整理它使用小经验 ， 心急的同学里可以先看看 &lt;a href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/"&gt;xdite&lt;/a&gt; 的经验 。&lt;/p&gt;
&lt;h2&gt;Wish&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;2012 this is a&amp;nbsp;turn. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt; 在这里我先 make some wishes:&lt;ol&gt;
&lt;li&gt; 研究及知识框架系统扩展完善 ,50+&amp;nbsp;paper。&lt;/li&gt;
&lt;li&gt; 将我 06 年买的那本 &lt;span class="caps"&gt;GRE&lt;/span&gt; 搞定 ， 是时候将英语修炼好了 ,G+ “ 英国老鼠 &amp;#8221;&amp;nbsp;only。&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HEEK&lt;/span&gt; is Energetic and Enthusiastic Kind naming after &lt;span class="caps"&gt;ROSS&lt;/span&gt;(responsibility,open,share,simplicity)。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;《Security inside Linux》&lt;/em&gt;,the&amp;nbsp;book。&lt;/li&gt;
&lt;li&gt; 为 &lt;a href="http://www.gentoo.org"&gt;Gentoo&lt;/a&gt; 社区作出一些小小的贡献 (ebuilds,translation,patch)。&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCEL&lt;/span&gt;(Trusted Computing Enhance Linux) leon&amp;nbsp;finished。&lt;/li&gt;
&lt;li&gt;building my toolbox &lt;strong&gt;samitoo&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Webos FetionIn， 融合到短信 &lt;span class="caps"&gt;IM&lt;/span&gt; 的飞信插件 。&lt;/li&gt;
&lt;li&gt; 体重到 67.5kg。&lt;/li&gt;
&lt;li&gt; 读 12 本书及书评 。&lt;/li&gt;
&lt;li&gt; 认识 12 个新朋友 。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 有点贪心 ， 可我的时间已经伤不起了 。
I believe 2012 is a&amp;nbsp;turn.&lt;/p&gt;
&lt;p&gt;&lt;img alt="do best" src="http://blog.cosmoslx.me/images/do-best.jpg" /&gt;&lt;/p&gt;</summary></entry></feed>